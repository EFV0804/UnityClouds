// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float2 Resolution;
float u_time;

float random(in float2 st) {
    return frac(sin(dot(st.xy,
        float2(12.9898, 78.233))) *
        43758.5453123);
}

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise(in float2 st) {
    float2 i = floor(st);
    float2 f = frac(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + float2(1.0, 0.0));
    float c = random(i + float2(0.0, 1.0));
    float d = random(i + float2(1.0, 1.0));

    float2 u = f * f * (3.0 - 2.0 * f);

    return lerp(a, b, u.x) +
        (c - a) * u.y * (1.0 - u.x) +
        (d - b) * u.x * u.y;
}

#define OCTAVES 10
float fbm(in float2 st) {
    // Initial values
    float value = 0.;
    float amplitude = 0.5;
    float frequency = 2.;
    //
    // Loop of octaves
    for (int i = 0; i < OCTAVES; i++) {
        value += amplitude * noise(st);
        st *= 2.192;
        amplitude *= 0.420;
    }
    return value;
}

float2 fade(float2 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }
float4 permute(float4 i) {
    float4 im = fmod(i, 289.0);
    return fmod(((im * 34.0) + 10.0) * im, 289.0);
}
float cnoise(float2 P) {
    float4 Pi = floor(P.xyxy) + float4(0.0, 0.0, 1.0, 1.0);
    float4 Pf = frac(P.xyxy) - float4(0.0, 0.0, 1.0, 1.0);
    Pi = fmod(Pi, 289.0); // To avoid truncation effects in permutation
    float4 ix = Pi.xzxz;
    float4 iy = Pi.yyww;
    float4 fx = Pf.xzxz;
    float4 fy = Pf.yyww;
    float4 i = permute(permute(ix) + iy);
    float4 gx = 2.0 * frac(i * 0.0243902439) - 1.0; // 1/41 = 0.024...
    float4 gy = abs(gx) - 0.5;
    float4 tx = floor(gx + 0.5);
    gx = gx - tx;
    float2 g00 = float2(gx.x, gy.x);
    float2 g10 = float2(gx.y, gy.y);
    float2 g01 = float2(gx.z, gy.z);
    float2 g11 = float2(gx.w, gy.w);
    float4 norm = 1.79284291400159 - 0.85373472095314 *
        float4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;
    float n00 = dot(g00, float2(fx.x, fy.x));
    float n10 = dot(g10, float2(fx.y, fy.y));
    float n01 = dot(g01, float2(fx.z, fy.z));
    float n11 = dot(g11, float2(fx.w, fy.w));
    float2 fade_xy = fade(Pf.xy);
    float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
    float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
    return 2.3 * n_xy;
}





[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float2 st = id.xy / Resolution;
    float3 color = float3(0,0,0);
    float modulation = sin(u_time * 2.5);
    modulation += sin(u_time * 1.5) * 2.;
    //color += fbm(st + 20. * (fbm(st + fbm(st))));

    float a = random(float2(1.4845, 1.4845)) + 0.5;

    float q = +cnoise(st * (a * 4.1) + cnoise(st * (a * 2.)));
    float b = cnoise(st * (a * .1) + cnoise(st * (a * 0.6)));
    //billowing: abs of 2 perlins
    float d = abs(q - b);
    color += d;

    Result[id.xy] = float4(color, 0);
}
