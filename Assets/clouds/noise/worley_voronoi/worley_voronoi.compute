// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result;
StructuredBuffer<float3> points;
float3 Resolution;
float u_time;
static const int3 offsets[] =
{
    // centre
    int3(0,0,0),
    // front face
    int3(0,0,1),
    int3(-1,1,1),
    int3(-1,0,1),
    int3(-1,-1,1),
    int3(0,1,1),
    int3(0,-1,1),
    int3(1,1,1),
    int3(1,0,1),
    int3(1,-1,1),
    // back face
    int3(0,0,-1),
    int3(-1,1,-1),
    int3(-1,0,-1),
    int3(-1,-1,-1),
    int3(0,1,-1),
    int3(0,-1,-1),
    int3(1,1,-1),
    int3(1,0,-1),
    int3(1,-1,-1),
    // ring around centre
    int3(-1,1,0),
    int3(-1,0,0),
    int3(-1,-1,0),
    int3(0,1,0),
    int3(0,-1,0),
    int3(1,1,0),
    int3(1,0,0),
    int3(1,-1,0)
};

float maxComponent(float3 vec) {
    return max(vec.x, max(vec.y, vec.z));
}

float minComponent(float3 vec) {
    return min(vec.x, min(vec.y, vec.z));
}
float voronoi(StructuredBuffer<float3> points, float3 st)
{

    int tile = 2;
    int numcells = 8;
    float3 pos = (st * tile) % 1;
    int3 i_st = floor(pos * numcells);

    float min_dist = 1.;

    for (int i = 0; i < 27; i++) {
        int3 neighbour = i_st + offsets[i];
        if (minComponent(neighbour) == -1 || maxComponent(neighbour) == numcells) {
            int3 wrapped_neighbour = (neighbour + numcells) % (uint3)numcells;
            int neighbour_index = wrapped_neighbour.x + numcells * (wrapped_neighbour.y + wrapped_neighbour.z * numcells);
            float3 wrapped_point = points[neighbour_index];
            for (int warp_i = 0; warp_i < 27; warp_i++) {
                float3 distance = (pos - (wrapped_point + offsets[warp_i]));
                min_dist = min(min_dist, dot(distance, distance));
            }
        }
        else {
            int neighbour_index = neighbour.x + numcells * (neighbour.y + neighbour.z * numcells);
            float3 distance = pos - points[neighbour_index];
            min_dist = min(min_dist, dot(distance, distance));

        }
    }
    
    return sqrt(min_dist);
}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 st = id / (float)Resolution;
    float3 color = float3(0, 0, 0);
    color += voronoi(points,st);

    Result[id.xyz] = float4(color,1);

}
